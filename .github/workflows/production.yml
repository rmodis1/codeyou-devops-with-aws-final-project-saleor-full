name: Production Pipeline

on:
  push:
    branches: [ production ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Images
        run: |
          # Build application images
          cd saleor-api && docker build -t saleor-api:production .
          cd ../saleor-dashboard && docker build -t saleor-dashboard:production .
          
          # Pull and Tag service images
          docker pull postgres:15-alpine
          docker pull redis:7.0-alpine
          docker pull jaegertracing/all-in-one:1.20.0
          docker pull axllent/mailpit
          
          docker tag postgres:15-alpine ${{ secrets.DOCKER_USERNAME }}/saleor-db:production
          docker tag redis:7.0-alpine ${{ secrets.DOCKER_USERNAME }}/saleor-redis:production
          docker tag jaegertracing/all-in-one:1.20.0 ${{ secrets.DOCKER_USERNAME }}/saleor-jaeger:production
          docker tag axllent/mailpit ${{ secrets.DOCKER_USERNAME }}/saleor-mailpit:production

      - name: Create test environment
        run: |
          docker network create saleor-network
          docker run -d --name postgres \
            --network saleor-network \
            -e POSTGRES_DB=saleor \
            -e POSTGRES_USER=saleor \
            -e POSTGRES_PASSWORD=saleor \
            postgres:13
          docker run -d --name redis \
            --network saleor-network \
            redis:6.2

      - name: Start Services with Docker Compose
        run: |
          docker compose up -d
          sleep 60

      - name: API Health Check
        run: |
          echo "Testing API health..."
          curl -v http://localhost:8000/health 

      - name: Dashboard Health Check
        run: |
          echo "Testing Dashboard health..."
          curl -v http://localhost:9000 || {
            echo "Warning: Dashboard health check failed, but continuing..."
            true
          }

      - name: Security Scan API
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'saleor-api:production'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

      - name: Security Scan Dashboard
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'saleor-dashboard:production'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Images to DockerHub
        run: |
          docker tag saleor-api:production ${{ secrets.DOCKER_USERNAME }}/saleor-api:production
          docker tag saleor-api:production ${{ secrets.DOCKER_USERNAME }}/saleor-api:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/saleor-api:production
          docker push ${{ secrets.DOCKER_USERNAME }}/saleor-api:latest
          
          docker tag saleor-dashboard:production ${{ secrets.DOCKER_USERNAME }}/saleor-dashboard:production
          docker tag saleor-dashboard:production ${{ secrets.DOCKER_USERNAME }}/saleor-dashboard:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/saleor-dashboard:production
          docker push ${{ secrets.DOCKER_USERNAME }}/saleor-dashboard:latest

          docker push ${{ secrets.DOCKER_USERNAME }}/saleor-db:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/saleor-redis:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/saleor-jaeger:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/saleor-mailpit:latest

  update-ecs:
    name: Update ECS Service
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER_NAME }} --service ${{ secrets.ECS_SERVICE_NAME }} --force-new-deployment

      - name: Cleanup
        if: always()
        run: |
          docker rm -f saleor-api dashboard postgres redis || true
          docker network rm saleor-network || true
